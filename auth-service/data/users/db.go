// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package users

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteStmt, err = db.PrepareContext(ctx, Delete); err != nil {
		return nil, fmt.Errorf("error preparing query Delete: %w", err)
	}
	if q.getAllStmt, err = db.PrepareContext(ctx, GetAll); err != nil {
		return nil, fmt.Errorf("error preparing query GetAll: %w", err)
	}
	if q.getByEmailStmt, err = db.PrepareContext(ctx, GetByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetByEmail: %w", err)
	}
	if q.getOneStmt, err = db.PrepareContext(ctx, GetOne); err != nil {
		return nil, fmt.Errorf("error preparing query GetOne: %w", err)
	}
	if q.insertStmt, err = db.PrepareContext(ctx, Insert); err != nil {
		return nil, fmt.Errorf("error preparing query Insert: %w", err)
	}
	if q.resetPasswordStmt, err = db.PrepareContext(ctx, ResetPassword); err != nil {
		return nil, fmt.Errorf("error preparing query ResetPassword: %w", err)
	}
	if q.updateStmt, err = db.PrepareContext(ctx, Update); err != nil {
		return nil, fmt.Errorf("error preparing query Update: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteStmt != nil {
		if cerr := q.deleteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStmt: %w", cerr)
		}
	}
	if q.getAllStmt != nil {
		if cerr := q.getAllStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllStmt: %w", cerr)
		}
	}
	if q.getByEmailStmt != nil {
		if cerr := q.getByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getByEmailStmt: %w", cerr)
		}
	}
	if q.getOneStmt != nil {
		if cerr := q.getOneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneStmt: %w", cerr)
		}
	}
	if q.insertStmt != nil {
		if cerr := q.insertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertStmt: %w", cerr)
		}
	}
	if q.resetPasswordStmt != nil {
		if cerr := q.resetPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetPasswordStmt: %w", cerr)
		}
	}
	if q.updateStmt != nil {
		if cerr := q.updateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                DBTX
	tx                *sql.Tx
	deleteStmt        *sql.Stmt
	getAllStmt        *sql.Stmt
	getByEmailStmt    *sql.Stmt
	getOneStmt        *sql.Stmt
	insertStmt        *sql.Stmt
	resetPasswordStmt *sql.Stmt
	updateStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                tx,
		tx:                tx,
		deleteStmt:        q.deleteStmt,
		getAllStmt:        q.getAllStmt,
		getByEmailStmt:    q.getByEmailStmt,
		getOneStmt:        q.getOneStmt,
		insertStmt:        q.insertStmt,
		resetPasswordStmt: q.resetPasswordStmt,
		updateStmt:        q.updateStmt,
	}
}
